<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.ecom.javacodings.customer.access.MemberDAO">
	<!-- Region Metadata -->

	<select id="isExistMemberID" resultType="int" parameterType="String">
		SELECT COUNT(MEMBER_ID) FROM MEMBERS
		WHERE MEMBER_ID = #{value}
	</select>

	<!-- End Region Metadata -->
	<!-- Region Basic CRUD -->

	<select id="findMemberByIDAndPassword"
			parameterType="memberDTO" resultType="memberDTO">
		SELECT MEMBER_ID, PASSWORD, ROLE
		FROM MEMBERS
		WHERE MEMBER_ID=#{member_id} AND PASSWORD=#{password}
	</select>

	<select id="getMemberIDByNameAndPhone"
			parameterType="memberDTO" resultType="string">
		SELECT MEMBER_ID
		FROM MEMBER_INFOS
		WHERE NAME = #{name} AND EMAIL = #{email}
	</select>

	<update id="setPassword" parameterType="memberDTO">
		UPDATE MEMBERS
		SET PASSWORD = #{password}
	<select id="getMemberById" parameterType="memberDTO" resultType="memberDTO">
		SELECT M.*, I.NAME, I.EMAIL, TO_CHAR(I.BIRTH, 'YYMMDD') AS BIRTH, I.PHONE
		FROM MEMBERS M
		JOIN MEMBER_INFOS I
		ON M.MEMBER_ID = I.MEMBER_ID
		WHERE M.MEMBER_ID = #{member_id}
	</select>
	
	<update id="temporaryPassword" parameterType="memberDTO">
	    UPDATE MEMBERS
	    SET PASSWORD = #{password}
	    WHERE MEMBER_ID = (SELECT MEMBER_ID FROM MEMBER_INFOS WHERE EMAIL = #{email})
	</update>
 
    <select id="idCheck" resultType="int">
      SELECT COUNT(MEMBER_ID) FROM MEMBERS
    	WHERE MEMBER_ID = #{member_id}
    </select>
      
    
    <insert id="memberJoin" parameterType="memberDTO" useGeneratedKeys="false">
    	INSERT ALL
	        INTO MEMBER (MEMBER_ID, PASSWORD, ROLE) 
	        VALUES (#{member_id}, #{password}, 'custom')
	        
	        INTO MEMBER_INFOS (MEMBER_ID, NAME, EMAIL, PHONE, BIRTH) 
	        VALUES (#{member_id}, #{name}, #{email}, #{phone}, #{birth})
	        
	        INTO ADDRESS (MEMBER_ID, ZIPCODE, ADDRESS, ADDRESS2) 
	        VALUES (#{member_id}, #{zipcode}, #{address}, #{address2})
	     	SELECT 1 FROM DUAL
    </insert>
    
	<update id="updateMember" parameterType="memberDTO">
		UPDATE MEMBER 
		SET PASSWORD = #{password}, 
		    ROLE = 'custom' 
		WHERE MEMBER_ID = #{member_id};
	</update>

	<insert id="addMember" parameterType="memberDTO" useGeneratedKeys="false">
		INSERT ALL
			INTO MEMBER (MEMBER_ID, PASSWORD, ROLE)
			VALUES (#{member_id}, #{password}, 'custom')

			INTO MEMBER_INFOS (MEMBER_ID, NAME, EMAIL, PHONE, BIRTH)
			VALUES (#{member_id}, #{name}, #{email}, #{phone}, #{birth})

			INTO ADDRESS (MEMBER_ID, ZIPCODE, ADDRESS, ADDRESS2)
			VALUES (#{member_id}, #{zipcode}, #{address}, #{address2})
		SELECT 1 FROM DUAL
	</insert>

	<delete id="archiveMemberByMemberID" parameterType="String">
		UPDATE MEMBERS
		SET ROLE = 'ARCHIVED'
		WHERE MEMBER_ID = #{value}
	</delete>

	<!-- End Region Basic CRUD -->
	<!-- Region Sub-Tables -->

	<select id="getAddressByMemberID" parameterType="String">
		SELECT ZIPCODE, ADDRESS, ADDRESS2
		FROM ADDRESS
		WHERE MEMBER_ID = #{value}
	</select>

	<update id="updateAddress" parameterType="memberDTO">
		UPDATE ADDRESS SET
			ZIPCODE  = #{zipcode},
			ADDRESS  = #{address},
			ADDRESS2 = #{address2}
		WHERE MEMBER_ID = #{member_id}
	</update>

	<update id="updateMemberInfo" parameterType="memberDTO">
		UPDATE MEMBER_INFOS SET
		 	NAME  = #{name},
			EMAIL = #{email},
			PHONE = #{phone},
			BIRTH = #{birth}
		WHERE MEMBER_ID = #{member_id}
	</update>

	<delete id="deleteAddressByPriorityAndMemberID" parameterType="map">
		DELETE FROM ADDRESS
		WHERE MEMBER_ID = #{member_id} AND PRIORITY = #{priority}
	</delete>

	<!-- End Region Sub-Tables CRUD -->
</mapper>