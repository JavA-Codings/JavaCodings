<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.ecom.javacodings.customer.access.orders.OrderDAO">
	<!-- Region Metadata -->

	<select id="countOrdersByMemberId" parameterType="String">
		SELECT COUNT(ORDER_ID)
		FROM ORDERS
		WHERE MEMBER_ID = #{member_id}
	</select>

	<select id="isExistOrderId">
		SELECT CASE WHEN COUNT(ORDER_ID) > 0 THEN '1' ELSE '0' END
		FROM ORDERS
		WHERE ORDER_ID = #{order_id}
	</select>

	<!-- End Region Metadata -->
	<!-- Region 기본 읽고 쓰기 ===============================================================-->

	<insert id="add" useGeneratedKeys="false">
		INSERT ALL
		INTO ORDERS(ORDER_ID, MEMBER_ID)
		VALUES (#{order.order_id}, #{order.member_id})

		INTO ORDER_STATES(ORDER_ID, STATE)
		VALUES (#{order.order_id}, 0)

		<foreach collection="order.itemList" item="item">
			INTO ORDER_ITEMS(ORDER_ID, ITEM_ID, AMOUNT)
			VALUES(#{order.order_id}, #{item.item_id}, #{item.amount})
		</foreach>
		SELECT 1 FROM DUAL
	</insert>

	<!-- ** READ ** -->

	<select id="findUnPayedOrderByOrderId" resultType="orderDTO">
		SELECT O.ORDER_ID, O.MEMBER_ID,
			   A.AMOUNT,
			   S.STATE, TO_CHAR(S.REG_DATE, 'YYYYMMDDHH24MISS') AS REG_DATE

		FROM ORDERS O
		 	 JOIN ORDER_STATES S
		     ON O.ORDER_ID = S.ORDER_ID

			 CROSS JOIN (
			 SELECT SUM(AMOUNT) AS AMOUNT
			 FROM ORDER_ITEMS
			 WHERE ORDER_ID = #{order_id}
			 GROUP BY ORDER_ID
			 ) A

		WHERE O.ORDER_ID = #{order_id}
	    AND (SELECT MAX(STATE) FROM ORDER_STATES WHERE ORDER_ID = #{order_id}) = '0'
	</select>

	<select id="findAllCartByOrderId" resultType="CartDTO">
		SELECT O.ITEM_ID, I.LABEL, O.AMOUNT
	    FROM ORDER_ITEMS O
	    JOIN ITEMS I ON O.ITEM_ID = I.ITEM_ID
		WHERE O.ORDER_ID = #{order_id}
	</select>

	<select id="findAllItemsByOrderId" resultType="CartDTO">
		SELECT O.ITEM_ID, I.LABEL, I.CATEGORY, I.PRICE, I."DESC", I.STOCK, O.AMOUNT
		FROM ORDER_ITEMS O
		 	 JOIN ITEMS I ON O.ITEM_ID = I.ITEM_ID
			 JOIN ITEM_IMAGES P ON O.ITEM_ID = P.ITEM_ID AND P.CATEGORY = 'thumbnail'
		WHERE O.ORDER_ID = #{order_id}
	</select>

	<select id="getAllItemIdByOrderId" resultType="String">
		SELECT ITEM_ID
		FROM ORDER_ITEMS
		WHERE ORDER_ID = #{order_id}
	</select>

	<select id="getItemIdByOrderId" resultType="String">
		SELECT ITEM_ID
		FROM ORDER_ITEMS
		WHERE ORDER_ID = #{order_id}
	</select>


	<insert id="increaseStateByOrderId">
		INSERT INTO ORDER_STATES (ORDER_ID,STATE, REG_DATE) VALUES
		(#{order_id}, (SELECT MAX(STATE) FROM ORDER_STATES) + 1,
		 TO_DATE(#{reg_date}, 'YYYYMMDDHH24MISS'))
	</insert>

	<update id="updateOrderStateByOrderID" parameterType="orderDTO">
		UPDATE ORDER_STATES SET
			STATE = #{state}
		WHERE ORDER_ID = #{order_id}
	</update>

	<update id="setTransactionIdByOrderId">
		UPDATE ORDERS SET
			TRANSACTION_ID = #{transaction_id}
		WHERE ORDER_ID = #{order_id}
	</update>
	
	<select id="findAllByMemberOrderOrders">
		SELECT 			
			OI.AMOUNT,
			OS.REG_DATE, 
			OS.STATE,
			O.ORDER_ID
		FROM 
		ORDERS O
			JOIN 
			MEMBERS M ON O.MEMBER_ID = M.MEMBER_ID 
			JOIN 
			ORDER_ITEMS OI ON O.ORDER_ID = OI.ORDER_ID			
			JOIN 
			ORDER_STATES OS ON O.ORDER_ID = OS.ORDER_ID
			WHERE 
			M.MEMBER_ID = #{member_id}
	</select>
	
	<select id="findAllByMemberOrderItems">
    	SELECT 
    		I.ITEM_ID, 
			I.LABEL, 
			II.PATH, 
			I.PRICE 
			<!-- CASE 
				WHEN I.PRICE = 0 THEN 0 
				ELSE OI.AMOUNT/I.PRICE 
				END AS --> 
		FROM ITEMS I 
			JOIN
			ITEM_IMAGES II ON I.ITEM_ID = II.ITEM_ID 
			JOIN
			ORDER_ITEMS OI ON I.ITEM_ID = OI.ITEM_ID
			JOIN
			ORDERS OS ON OI.ORDER_ID = OS.ORDER_ID 
			JOIN 
			MEMBERS M ON OS.MEMBER_ID = M.MEMBER_ID
			WHERE
			M.MEMBER_ID = #{member_id}
    </select>
	
	<!-- End Region Basic CRUD -->
</mapper>
 